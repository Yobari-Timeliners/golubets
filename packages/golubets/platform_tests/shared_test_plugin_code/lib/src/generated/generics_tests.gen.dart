// Copyright 2013 The Flutter Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Golubets, do not edit directly.
// See also: https://pub.dev/packages/golubets
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({
  Object? result,
  PlatformException? error,
  bool empty = false,
}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed.every(
          ((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]),
        );
  }
  if (a is Map && b is Map) {
    return a.length == b.length &&
        a.entries.every(
          (MapEntry<Object?, Object?> entry) =>
              (b as Map<Object?, Object?>).containsKey(entry.key) &&
              _deepEquals(entry.value, b[entry.key]),
        );
  }
  return a == b;
}

enum GenericsAnEnum {
  one,
  two,
  three,
  fortyTwo,
  fourHundredTwentyTwo,
}

enum GenericsAnotherEnum {
  justInCase,
}

/// A simple generic container class.
class GenericContainer<T> {
  const GenericContainer({
    this.value,
    required this.values,
  });

  final T? value;

  final List<T> values;

  List<Object?> _toList() {
    return <Object?>[
      value,
      values,
    ];
  }

  Object encode() {
    return _toList();
  }

  static GenericContainer<T> decode<T>(Object result) {
    result as List<Object?>;
    return GenericContainer<T>(
      value: result[0] as T?,
      values: (result[1] as List<Object?>?)!.cast<T>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! GenericContainer || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

/// A generic class with two type parameters.
class GenericPair<T, K> {
  const GenericPair({
    required this.first,
    this.second,
    required this.map,
  });

  final T first;

  final K? second;

  final Map<T, K> map;

  List<Object?> _toList() {
    return <Object?>[
      first,
      second,
      map,
    ];
  }

  Object encode() {
    return _toList();
  }

  static GenericPair<T, K> decode<T, K>(Object result) {
    result as List<Object?>;
    return GenericPair<T, K>(
      first: result[0]! as T,
      second: result[1] as K?,
      map: (result[2] as Map<Object?, Object?>?)!.cast<T, K>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! GenericPair || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

/// A complex nested generic class.
class NestedGeneric<T, K, V> {
  const NestedGeneric({
    required this.container,
    required this.pairs,
    required this.nestedMap,
    required this.listOfMaps,
  });

  final GenericContainer<T> container;

  final List<GenericPair<K, V>> pairs;

  final Map<T, GenericContainer<K>> nestedMap;

  final List<Map<Object?, Object?>> listOfMaps;

  List<Object?> _toList() {
    return <Object?>[
      container,
      pairs,
      nestedMap,
      listOfMaps,
    ];
  }

  Object encode() {
    return _toList();
  }

  static NestedGeneric<T, K, V> decode<T, K, V>(Object result) {
    result as List<Object?>;
    return NestedGeneric<T, K, V>(
      container: (result[0] as GenericContainer<T>?)!,
      pairs: (result[1] as List<Object?>?)!.cast<GenericPair<K, V>>(),
      nestedMap: (result[2] as Map<Object?, Object?>?)!
          .cast<T, GenericContainer<K>>(),
      listOfMaps: (result[3] as List<Object?>?)!.cast<Map<Object?, Object?>>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NestedGeneric || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

/// A class containing all supported types.
class GenericsAllTypes {
  GenericsAllTypes({
    this.aBool = false,
    this.anInt = 0,
    this.anInt64 = 0,
    this.aDouble = 0,
    required this.aByteArray,
    required this.a4ByteArray,
    required this.a8ByteArray,
    required this.aFloatArray,
    this.anEnum = GenericsAnEnum.one,
    this.anotherEnum = GenericsAnotherEnum.justInCase,
    this.aString = '',
    this.anObject = 0,
    required this.list,
    required this.stringList,
    required this.intList,
    required this.doubleList,
    required this.boolList,
    required this.enumList,
    required this.objectList,
    required this.listList,
    required this.mapList,
    required this.map,
    required this.stringMap,
    required this.intMap,
    required this.enumMap,
    required this.objectMap,
    required this.listMap,
    required this.mapMap,
  });

  bool aBool;

  int anInt;

  int anInt64;

  double aDouble;

  Uint8List aByteArray;

  Int32List a4ByteArray;

  Int64List a8ByteArray;

  Float64List aFloatArray;

  GenericsAnEnum anEnum;

  GenericsAnotherEnum anotherEnum;

  String aString;

  Object anObject;

  List<Object?> list;

  List<String> stringList;

  List<int> intList;

  List<double> doubleList;

  List<bool> boolList;

  List<GenericsAnEnum> enumList;

  List<Object> objectList;

  List<List<Object?>> listList;

  List<Map<Object?, Object?>> mapList;

  Map<Object?, Object?> map;

  Map<String, String> stringMap;

  Map<int, int> intMap;

  Map<GenericsAnEnum, GenericsAnEnum> enumMap;

  Map<Object, Object> objectMap;

  Map<int, List<Object?>> listMap;

  Map<int, Map<Object?, Object?>> mapMap;

  List<Object?> _toList() {
    return <Object?>[
      aBool,
      anInt,
      anInt64,
      aDouble,
      aByteArray,
      a4ByteArray,
      a8ByteArray,
      aFloatArray,
      anEnum,
      anotherEnum,
      aString,
      anObject,
      list,
      stringList,
      intList,
      doubleList,
      boolList,
      enumList,
      objectList,
      listList,
      mapList,
      map,
      stringMap,
      intMap,
      enumMap,
      objectMap,
      listMap,
      mapMap,
    ];
  }

  Object encode() {
    return _toList();
  }

  static GenericsAllTypes decode(Object result) {
    result as List<Object?>;
    return GenericsAllTypes(
      aBool: result[0]! as bool,
      anInt: result[1]! as int,
      anInt64: result[2]! as int,
      aDouble: result[3]! as double,
      aByteArray: result[4]! as Uint8List,
      a4ByteArray: result[5]! as Int32List,
      a8ByteArray: result[6]! as Int64List,
      aFloatArray: result[7]! as Float64List,
      anEnum: result[8]! as GenericsAnEnum,
      anotherEnum: result[9]! as GenericsAnotherEnum,
      aString: result[10]! as String,
      anObject: result[11]!,
      list: result[12]! as List<Object?>,
      stringList: (result[13] as List<Object?>?)!.cast<String>(),
      intList: (result[14] as List<Object?>?)!.cast<int>(),
      doubleList: (result[15] as List<Object?>?)!.cast<double>(),
      boolList: (result[16] as List<Object?>?)!.cast<bool>(),
      enumList: (result[17] as List<Object?>?)!.cast<GenericsAnEnum>(),
      objectList: (result[18] as List<Object?>?)!.cast<Object>(),
      listList: (result[19] as List<Object?>?)!.cast<List<Object?>>(),
      mapList: (result[20] as List<Object?>?)!.cast<Map<Object?, Object?>>(),
      map: result[21]! as Map<Object?, Object?>,
      stringMap: (result[22] as Map<Object?, Object?>?)!.cast<String, String>(),
      intMap: (result[23] as Map<Object?, Object?>?)!.cast<int, int>(),
      enumMap: (result[24] as Map<Object?, Object?>?)!
          .cast<GenericsAnEnum, GenericsAnEnum>(),
      objectMap: (result[25] as Map<Object?, Object?>?)!.cast<Object, Object>(),
      listMap: (result[26] as Map<Object?, Object?>?)!
          .cast<int, List<Object?>>(),
      mapMap: (result[27] as Map<Object?, Object?>?)!
          .cast<int, Map<Object?, Object?>>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! GenericsAllTypes || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

/// A class containing all supported nullable types.
class GenericsAllNullableTypes {
  GenericsAllNullableTypes({
    this.aNullableBool,
    this.aNullableInt,
    this.aNullableInt64,
    this.aNullableDouble,
    this.aNullableByteArray,
    this.aNullable4ByteArray,
    this.aNullable8ByteArray,
    this.aNullableFloatArray,
    this.aNullableEnum,
    this.anotherNullableEnum,
    this.aNullableString,
    this.aNullableObject,
    this.allNullableTypes,
    this.list,
    this.stringList,
    this.intList,
    this.doubleList,
    this.boolList,
    this.enumList,
    this.objectList,
    this.listList,
    this.mapList,
    this.recursiveClassList,
    this.map,
    this.stringMap,
    this.intMap,
    this.enumMap,
    this.objectMap,
    this.listMap,
    this.mapMap,
    this.recursiveClassMap,
  });

  bool? aNullableBool;

  int? aNullableInt;

  int? aNullableInt64;

  double? aNullableDouble;

  Uint8List? aNullableByteArray;

  Int32List? aNullable4ByteArray;

  Int64List? aNullable8ByteArray;

  Float64List? aNullableFloatArray;

  GenericsAnEnum? aNullableEnum;

  GenericsAnotherEnum? anotherNullableEnum;

  String? aNullableString;

  Object? aNullableObject;

  GenericsAllNullableTypes? allNullableTypes;

  List<Object?>? list;

  List<String?>? stringList;

  List<int?>? intList;

  List<double?>? doubleList;

  List<bool?>? boolList;

  List<GenericsAnEnum?>? enumList;

  List<Object?>? objectList;

  List<List<Object?>?>? listList;

  List<Map<Object?, Object?>?>? mapList;

  List<GenericsAllNullableTypes?>? recursiveClassList;

  Map<Object?, Object?>? map;

  Map<String?, String?>? stringMap;

  Map<int?, int?>? intMap;

  Map<GenericsAnEnum?, GenericsAnEnum?>? enumMap;

  Map<Object?, Object?>? objectMap;

  Map<int?, List<Object?>?>? listMap;

  Map<int?, Map<Object?, Object?>?>? mapMap;

  Map<int?, GenericsAllNullableTypes?>? recursiveClassMap;

  List<Object?> _toList() {
    return <Object?>[
      aNullableBool,
      aNullableInt,
      aNullableInt64,
      aNullableDouble,
      aNullableByteArray,
      aNullable4ByteArray,
      aNullable8ByteArray,
      aNullableFloatArray,
      aNullableEnum,
      anotherNullableEnum,
      aNullableString,
      aNullableObject,
      allNullableTypes,
      list,
      stringList,
      intList,
      doubleList,
      boolList,
      enumList,
      objectList,
      listList,
      mapList,
      recursiveClassList,
      map,
      stringMap,
      intMap,
      enumMap,
      objectMap,
      listMap,
      mapMap,
      recursiveClassMap,
    ];
  }

  Object encode() {
    return _toList();
  }

  static GenericsAllNullableTypes decode(Object result) {
    result as List<Object?>;
    return GenericsAllNullableTypes(
      aNullableBool: result[0] as bool?,
      aNullableInt: result[1] as int?,
      aNullableInt64: result[2] as int?,
      aNullableDouble: result[3] as double?,
      aNullableByteArray: result[4] as Uint8List?,
      aNullable4ByteArray: result[5] as Int32List?,
      aNullable8ByteArray: result[6] as Int64List?,
      aNullableFloatArray: result[7] as Float64List?,
      aNullableEnum: result[8] as GenericsAnEnum?,
      anotherNullableEnum: result[9] as GenericsAnotherEnum?,
      aNullableString: result[10] as String?,
      aNullableObject: result[11],
      allNullableTypes: result[12] as GenericsAllNullableTypes?,
      list: result[13] as List<Object?>?,
      stringList: (result[14] as List<Object?>?)?.cast<String?>(),
      intList: (result[15] as List<Object?>?)?.cast<int?>(),
      doubleList: (result[16] as List<Object?>?)?.cast<double?>(),
      boolList: (result[17] as List<Object?>?)?.cast<bool?>(),
      enumList: (result[18] as List<Object?>?)?.cast<GenericsAnEnum?>(),
      objectList: (result[19] as List<Object?>?)?.cast<Object?>(),
      listList: (result[20] as List<Object?>?)?.cast<List<Object?>?>(),
      mapList: (result[21] as List<Object?>?)?.cast<Map<Object?, Object?>?>(),
      recursiveClassList: (result[22] as List<Object?>?)
          ?.cast<GenericsAllNullableTypes?>(),
      map: result[23] as Map<Object?, Object?>?,
      stringMap: (result[24] as Map<Object?, Object?>?)
          ?.cast<String?, String?>(),
      intMap: (result[25] as Map<Object?, Object?>?)?.cast<int?, int?>(),
      enumMap: (result[26] as Map<Object?, Object?>?)
          ?.cast<GenericsAnEnum?, GenericsAnEnum?>(),
      objectMap: (result[27] as Map<Object?, Object?>?)
          ?.cast<Object?, Object?>(),
      listMap: (result[28] as Map<Object?, Object?>?)
          ?.cast<int?, List<Object?>?>(),
      mapMap: (result[29] as Map<Object?, Object?>?)
          ?.cast<int?, Map<Object?, Object?>?>(),
      recursiveClassMap: (result[30] as Map<Object?, Object?>?)
          ?.cast<int?, GenericsAllNullableTypes?>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! GenericsAllNullableTypes ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

/// A class containing all supported nullable types.
class GenericsAllNullableTypesTyped<T, K, V> {
  GenericsAllNullableTypesTyped({
    this.aNullableBool,
    this.aNullableInt,
    this.aNullableInt64,
    this.aNullableDouble,
    this.aNullableByteArray,
    this.aNullable4ByteArray,
    this.aNullable8ByteArray,
    this.aNullableFloatArray,
    this.aNullableEnum,
    this.anotherNullableEnum,
    this.aNullableString,
    this.aNullableObject,
    this.allNullableTypes,
    this.list,
    this.stringList,
    this.intList,
    this.doubleList,
    this.boolList,
    this.enumList,
    this.objectList,
    this.listList,
    this.mapList,
    this.recursiveClassList,
    this.map,
    this.stringMap,
    this.intMap,
    this.enumMap,
    this.objectMap,
    this.listMap,
    this.mapMap,
    this.recursiveClassMap,
  });

  bool? aNullableBool;

  int? aNullableInt;

  int? aNullableInt64;

  double? aNullableDouble;

  Uint8List? aNullableByteArray;

  Int32List? aNullable4ByteArray;

  Int64List? aNullable8ByteArray;

  Float64List? aNullableFloatArray;

  GenericsAnEnum? aNullableEnum;

  GenericsAnotherEnum? anotherNullableEnum;

  String? aNullableString;

  Object? aNullableObject;

  GenericsAllNullableTypes? allNullableTypes;

  List<Object?>? list;

  List<T?>? stringList;

  List<V?>? intList;

  List<K?>? doubleList;

  List<T?>? boolList;

  List<V?>? enumList;

  List<K?>? objectList;

  List<List<K?>?>? listList;

  List<Map<T?, V?>?>? mapList;

  List<GenericsAllNullableTypes?>? recursiveClassList;

  Map<Object?, Object?>? map;

  Map<T?, T?>? stringMap;

  Map<V?, K?>? intMap;

  Map<GenericsAnEnum?, GenericsAnEnum?>? enumMap;

  Map<Object?, Object?>? objectMap;

  Map<int?, List<K?>?>? listMap;

  Map<int?, Map<K?, K?>?>? mapMap;

  Map<int?, GenericsAllNullableTypes?>? recursiveClassMap;

  List<Object?> _toList() {
    return <Object?>[
      aNullableBool,
      aNullableInt,
      aNullableInt64,
      aNullableDouble,
      aNullableByteArray,
      aNullable4ByteArray,
      aNullable8ByteArray,
      aNullableFloatArray,
      aNullableEnum,
      anotherNullableEnum,
      aNullableString,
      aNullableObject,
      allNullableTypes,
      list,
      stringList,
      intList,
      doubleList,
      boolList,
      enumList,
      objectList,
      listList,
      mapList,
      recursiveClassList,
      map,
      stringMap,
      intMap,
      enumMap,
      objectMap,
      listMap,
      mapMap,
      recursiveClassMap,
    ];
  }

  Object encode() {
    return _toList();
  }

  static GenericsAllNullableTypesTyped<T, K, V> decode<T, K, V>(Object result) {
    result as List<Object?>;
    return GenericsAllNullableTypesTyped<T, K, V>(
      aNullableBool: result[0] as bool?,
      aNullableInt: result[1] as int?,
      aNullableInt64: result[2] as int?,
      aNullableDouble: result[3] as double?,
      aNullableByteArray: result[4] as Uint8List?,
      aNullable4ByteArray: result[5] as Int32List?,
      aNullable8ByteArray: result[6] as Int64List?,
      aNullableFloatArray: result[7] as Float64List?,
      aNullableEnum: result[8] as GenericsAnEnum?,
      anotherNullableEnum: result[9] as GenericsAnotherEnum?,
      aNullableString: result[10] as String?,
      aNullableObject: result[11],
      allNullableTypes: result[12] as GenericsAllNullableTypes?,
      list: result[13] as List<Object?>?,
      stringList: (result[14] as List<Object?>?)?.cast<T?>(),
      intList: (result[15] as List<Object?>?)?.cast<V?>(),
      doubleList: (result[16] as List<Object?>?)?.cast<K?>(),
      boolList: (result[17] as List<Object?>?)?.cast<T?>(),
      enumList: (result[18] as List<Object?>?)?.cast<V?>(),
      objectList: (result[19] as List<Object?>?)?.cast<K?>(),
      listList: (result[20] as List<Object?>?)?.cast<List<K?>?>(),
      mapList: (result[21] as List<Object?>?)?.cast<Map<T?, V?>?>(),
      recursiveClassList: (result[22] as List<Object?>?)
          ?.cast<GenericsAllNullableTypes?>(),
      map: result[23] as Map<Object?, Object?>?,
      stringMap: (result[24] as Map<Object?, Object?>?)?.cast<T?, T?>(),
      intMap: (result[25] as Map<Object?, Object?>?)?.cast<V?, K?>(),
      enumMap: (result[26] as Map<Object?, Object?>?)
          ?.cast<GenericsAnEnum?, GenericsAnEnum?>(),
      objectMap: (result[27] as Map<Object?, Object?>?)
          ?.cast<Object?, Object?>(),
      listMap: (result[28] as Map<Object?, Object?>?)?.cast<int?, List<K?>?>(),
      mapMap: (result[29] as Map<Object?, Object?>?)
          ?.cast<int?, Map<K?, K?>?>(),
      recursiveClassMap: (result[30] as Map<Object?, Object?>?)
          ?.cast<int?, GenericsAllNullableTypes?>(),
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! GenericsAllNullableTypesTyped ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

sealed class Either<L, R> {
  const Either();
}

class Left<L, R> extends Either<L, R> {
  const Left({
    required this.value,
  });

  final L value;

  List<Object?> _toList() {
    return <Object?>[
      value,
    ];
  }

  Object encode() {
    return _toList();
  }

  static Left<L, R> decode<L, R>(Object result) {
    result as List<Object?>;
    return Left<L, R>(
      value: result[0]! as L,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! Left || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class Right<L, R> extends Either<L, R> {
  const Right({
    required this.value,
  });

  final R value;

  List<Object?> _toList() {
    return <Object?>[
      value,
    ];
  }

  Object encode() {
    return _toList();
  }

  static Right<L, R> decode<L, R>(Object result) {
    result as List<Object?>;
    return Right<L, R>(
      value: result[0]! as R,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! Right || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class GenericDefaults {
  GenericDefaults({
    this.genericInt = const GenericContainer<int>(
      value: 42,
      values: const <int>[
        1,
        2,
        3,
      ],
    ),
    this.genericString = const GenericContainer<String>(
      value: 'default',
      values: const <String>[
        'a',
        'b',
        'c',
      ],
    ),
    this.genericDouble = const GenericContainer<double>(
      value: 3.14,
      values: const <double>[
        1.0,
        2.0,
        3.0,
      ],
    ),
    this.genericBool = const GenericContainer<bool>(
      value: true,
      values: const <bool>[
        true,
        false,
        true,
      ],
    ),
    this.genericPairStringInt = const GenericPair<String, int>(
      first: 'default',
      second: 42,
      map: const <String, int>{
        'key1': 1,
        'key2': 2,
      },
    ),
    this.genericPairIntString = const GenericPair<int, String>(
      first: 100,
      second: 'value',
      map: const <int, String>{
        1: 'one',
        2: 'two',
      },
    ),
    this.nestedGenericDefault = const NestedGeneric<String, int, double>(
      container: const GenericContainer<String>(
        value: 'nested',
        values: const <String>[
          'x',
          'y',
          'z',
        ],
      ),
      pairs: const <GenericPair<int, double>>[
        const GenericPair<int, double>(
          first: 1,
          second: 1.1,
          map: const <int, double>{
            1: 1.1,
            2: 2.2,
          },
        ),
      ],
      nestedMap: const <String, GenericContainer<int>>{
        'nested': const GenericContainer<int>(
          value: 99,
          values: const <int>[
            9,
            8,
            7,
          ],
        ),
      },
      listOfMaps: const <Map<int, double>>[
        const <int, double>{
          10: 10.0,
          20: 20.0,
        },
      ],
    ),
    this.genericPairEither = const GenericPair<int, Either<String, int>>(
      first: 0,
      second: const Right<String, int>(value: 2),
      map: const <int, Either<String, int>>{
        3: const Right<String, int>(value: 4),
        5: const Left<String, int>(value: 'hello'),
      },
    ),
  });

  GenericContainer<int> genericInt;

  GenericContainer<String> genericString;

  GenericContainer<double> genericDouble;

  GenericContainer<bool> genericBool;

  GenericPair<String, int> genericPairStringInt;

  GenericPair<int, String> genericPairIntString;

  NestedGeneric<String, int, double> nestedGenericDefault;

  GenericPair<int, Either<String, int>> genericPairEither;

  List<Object?> _toList() {
    return <Object?>[
      genericInt,
      genericString,
      genericDouble,
      genericBool,
      genericPairStringInt,
      genericPairIntString,
      nestedGenericDefault,
      genericPairEither,
    ];
  }

  Object encode() {
    return _toList();
  }

  static GenericDefaults decode(Object result) {
    result as List<Object?>;
    return GenericDefaults(
      genericInt: (result[0] as GenericContainer<int>?)!,
      genericString: (result[1] as GenericContainer<String>?)!,
      genericDouble: (result[2] as GenericContainer<double>?)!,
      genericBool: (result[3] as GenericContainer<bool>?)!,
      genericPairStringInt: (result[4] as GenericPair<String, int>?)!,
      genericPairIntString: (result[5] as GenericPair<int, String>?)!,
      nestedGenericDefault: (result[6] as NestedGeneric<String, int, double>?)!,
      genericPairEither: (result[7] as GenericPair<int, Either<String, int>>?)!,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! GenericDefaults || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class _GolubetsCodec extends StandardMessageCodec {
  const _GolubetsCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    } else if (value is GenericsAnEnum) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    } else if (value is GenericsAnotherEnum) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    } else if (value is GenericContainer &&
        value.runtimeType ==
            GenericContainer<
              GenericsAllNullableTypesTyped<String, int, double>
            >) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is GenericContainer &&
        value.runtimeType == GenericContainer<bool>) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is GenericContainer &&
        value.runtimeType == GenericContainer<double>) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is GenericContainer &&
        value.runtimeType == GenericContainer<int?>) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is GenericContainer &&
        value.runtimeType == GenericContainer<Either<String, int>>) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is GenericContainer &&
        value.runtimeType == GenericContainer<int>) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is GenericContainer &&
        value.runtimeType == GenericContainer<String>) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is GenericContainer &&
        value.runtimeType == GenericContainer<GenericsAnEnum>) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is GenericContainer &&
        value.runtimeType == GenericContainer<String?>) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else if (value is GenericContainer &&
        value.runtimeType == GenericContainer<GenericsAllTypes>) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else if (value is GenericPair &&
        value.runtimeType == GenericPair<int, Either<String, int>>) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else if (value is GenericPair &&
        value.runtimeType == GenericPair<double, bool>) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else if (value is GenericPair &&
        value.runtimeType == GenericPair<int, String>) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    } else if (value is GenericPair &&
        value.runtimeType ==
            GenericPair<
              GenericsAllNullableTypesTyped<String, int, double>,
              GenericsAllNullableTypesTyped<int, String, bool>
            >) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    } else if (value is GenericPair &&
        value.runtimeType == GenericPair<int, double>) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    } else if (value is GenericPair &&
        value.runtimeType == GenericPair<String, double>) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    } else if (value is GenericPair &&
        value.runtimeType == GenericPair<String, int>) {
      buffer.putUint8(147);
      writeValue(buffer, value.encode());
    } else if (value is GenericPair &&
        value.runtimeType ==
            GenericPair<GenericsAllTypes, GenericsAllNullableTypes>) {
      buffer.putUint8(148);
      writeValue(buffer, value.encode());
    } else if (value is NestedGeneric &&
        value.runtimeType == NestedGeneric<GenericsAllTypes, String, int>) {
      buffer.putUint8(149);
      writeValue(buffer, value.encode());
    } else if (value is NestedGeneric &&
        value.runtimeType == NestedGeneric<String, int, double>) {
      buffer.putUint8(150);
      writeValue(buffer, value.encode());
    } else if (value is GenericsAllTypes) {
      buffer.putUint8(151);
      writeValue(buffer, value.encode());
    } else if (value is GenericsAllNullableTypes) {
      buffer.putUint8(152);
      writeValue(buffer, value.encode());
    } else if (value is GenericsAllNullableTypesTyped &&
        value.runtimeType ==
            GenericsAllNullableTypesTyped<String, int, double>) {
      buffer.putUint8(153);
      writeValue(buffer, value.encode());
    } else if (value is GenericsAllNullableTypesTyped &&
        value.runtimeType ==
            GenericsAllNullableTypesTyped<int, String, double>) {
      buffer.putUint8(154);
      writeValue(buffer, value.encode());
    } else if (value is GenericsAllNullableTypesTyped &&
        value.runtimeType == GenericsAllNullableTypesTyped<int, String, bool>) {
      buffer.putUint8(155);
      writeValue(buffer, value.encode());
    } else if (value is GenericsAllNullableTypesTyped &&
        value.runtimeType ==
            GenericsAllNullableTypesTyped<GenericsAnEnum, double, String>) {
      buffer.putUint8(156);
      writeValue(buffer, value.encode());
    } else if (value is Left &&
        value.runtimeType ==
            Left<GenericPair<String, int>, GenericPair<int, String>>) {
      buffer.putUint8(157);
      writeValue(buffer, value.encode());
    } else if (value is Left &&
        value.runtimeType ==
            Left<
              NestedGeneric<String, int, double>,
              NestedGeneric<GenericsAllTypes, String, int>
            >) {
      buffer.putUint8(158);
      writeValue(buffer, value.encode());
    } else if (value is Left && value.runtimeType == Left<String, int>) {
      buffer.putUint8(159);
      writeValue(buffer, value.encode());
    } else if (value is Left &&
        value.runtimeType ==
            Left<GenericContainer<int>, GenericContainer<String>>) {
      buffer.putUint8(160);
      writeValue(buffer, value.encode());
    } else if (value is Right &&
        value.runtimeType ==
            Right<GenericPair<String, int>, GenericPair<int, String>>) {
      buffer.putUint8(161);
      writeValue(buffer, value.encode());
    } else if (value is Right &&
        value.runtimeType ==
            Right<
              NestedGeneric<String, int, double>,
              NestedGeneric<GenericsAllTypes, String, int>
            >) {
      buffer.putUint8(162);
      writeValue(buffer, value.encode());
    } else if (value is Right && value.runtimeType == Right<String, int>) {
      buffer.putUint8(163);
      writeValue(buffer, value.encode());
    } else if (value is Right &&
        value.runtimeType ==
            Right<GenericContainer<int>, GenericContainer<String>>) {
      buffer.putUint8(164);
      writeValue(buffer, value.encode());
    } else if (value is GenericDefaults) {
      buffer.putUint8(165);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : GenericsAnEnum.values[value];
      case 130:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : GenericsAnotherEnum.values[value];
      case 131:
        return GenericContainer.decode<
          GenericsAllNullableTypesTyped<String, int, double>
        >(readValue(buffer)!);
      case 132:
        return GenericContainer.decode<bool>(readValue(buffer)!);
      case 133:
        return GenericContainer.decode<double>(readValue(buffer)!);
      case 134:
        return GenericContainer.decode<int?>(readValue(buffer)!);
      case 135:
        return GenericContainer.decode<Either<String, int>>(readValue(buffer)!);
      case 136:
        return GenericContainer.decode<int>(readValue(buffer)!);
      case 137:
        return GenericContainer.decode<String>(readValue(buffer)!);
      case 138:
        return GenericContainer.decode<GenericsAnEnum>(readValue(buffer)!);
      case 139:
        return GenericContainer.decode<String?>(readValue(buffer)!);
      case 140:
        return GenericContainer.decode<GenericsAllTypes>(readValue(buffer)!);
      case 141:
        return GenericPair.decode<int, Either<String, int>>(readValue(buffer)!);
      case 142:
        return GenericPair.decode<double, bool>(readValue(buffer)!);
      case 143:
        return GenericPair.decode<int, String>(readValue(buffer)!);
      case 144:
        return GenericPair.decode<
          GenericsAllNullableTypesTyped<String, int, double>,
          GenericsAllNullableTypesTyped<int, String, bool>
        >(readValue(buffer)!);
      case 145:
        return GenericPair.decode<int, double>(readValue(buffer)!);
      case 146:
        return GenericPair.decode<String, double>(readValue(buffer)!);
      case 147:
        return GenericPair.decode<String, int>(readValue(buffer)!);
      case 148:
        return GenericPair.decode<GenericsAllTypes, GenericsAllNullableTypes>(
          readValue(buffer)!,
        );
      case 149:
        return NestedGeneric.decode<GenericsAllTypes, String, int>(
          readValue(buffer)!,
        );
      case 150:
        return NestedGeneric.decode<String, int, double>(readValue(buffer)!);
      case 151:
        return GenericsAllTypes.decode(readValue(buffer)!);
      case 152:
        return GenericsAllNullableTypes.decode(readValue(buffer)!);
      case 153:
        return GenericsAllNullableTypesTyped.decode<String, int, double>(
          readValue(buffer)!,
        );
      case 154:
        return GenericsAllNullableTypesTyped.decode<int, String, double>(
          readValue(buffer)!,
        );
      case 155:
        return GenericsAllNullableTypesTyped.decode<int, String, bool>(
          readValue(buffer)!,
        );
      case 156:
        return GenericsAllNullableTypesTyped.decode<
          GenericsAnEnum,
          double,
          String
        >(readValue(buffer)!);
      case 157:
        return Left.decode<GenericPair<String, int>, GenericPair<int, String>>(
          readValue(buffer)!,
        );
      case 158:
        return Left.decode<
          NestedGeneric<String, int, double>,
          NestedGeneric<GenericsAllTypes, String, int>
        >(readValue(buffer)!);
      case 159:
        return Left.decode<String, int>(readValue(buffer)!);
      case 160:
        return Left.decode<GenericContainer<int>, GenericContainer<String>>(
          readValue(buffer)!,
        );
      case 161:
        return Right.decode<GenericPair<String, int>, GenericPair<int, String>>(
          readValue(buffer)!,
        );
      case 162:
        return Right.decode<
          NestedGeneric<String, int, double>,
          NestedGeneric<GenericsAllTypes, String, int>
        >(readValue(buffer)!);
      case 163:
        return Right.decode<String, int>(readValue(buffer)!);
      case 164:
        return Right.decode<GenericContainer<int>, GenericContainer<String>>(
          readValue(buffer)!,
        );
      case 165:
        return GenericDefaults.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// Generic API for testing various generic type combinations.
class HostGenericApi {
  /// Constructor for [HostGenericApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  HostGenericApi({
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) : golubetsVar_binaryMessenger = binaryMessenger,
       golubetsVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty
           ? '.$messageChannelSuffix'
           : '';
  final BinaryMessenger? golubetsVar_binaryMessenger;

  static const MessageCodec<Object?> golubetsChannelCodec = _GolubetsCodec();

  final String golubetsVar_messageChannelSuffix;

  Future<GenericContainer<int>> echoGenericInt(
    GenericContainer<int> container,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoGenericInt$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[container],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as GenericContainer<int>?)!;
    }
  }

  Future<GenericContainer<String>> echoGenericString(
    GenericContainer<String> container,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoGenericString$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[container],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as GenericContainer<String>?)!;
    }
  }

  Future<GenericContainer<double>> echoGenericDouble(
    GenericContainer<double> container,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoGenericDouble$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[container],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as GenericContainer<double>?)!;
    }
  }

  Future<GenericContainer<bool>> echoGenericBool(
    GenericContainer<bool> container,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoGenericBool$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[container],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as GenericContainer<bool>?)!;
    }
  }

  Future<GenericContainer<GenericsAnEnum>> echoGenericEnum(
    GenericContainer<GenericsAnEnum> container,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoGenericEnum$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[container],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as GenericContainer<GenericsAnEnum>?)!;
    }
  }

  Future<GenericContainer<int?>> echoGenericNullableInt(
    GenericContainer<int?> container,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoGenericNullableInt$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[container],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as GenericContainer<int?>?)!;
    }
  }

  Future<GenericContainer<String?>> echoGenericNullableString(
    GenericContainer<String?> container,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoGenericNullableString$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[container],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as GenericContainer<String?>?)!;
    }
  }

  Future<GenericPair<String, int>> echoGenericPairStringInt(
    GenericPair<String, int> pair,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoGenericPairStringInt$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[pair],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as GenericPair<String, int>?)!;
    }
  }

  Future<GenericPair<int, String>> echoGenericPairIntString(
    GenericPair<int, String> pair,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoGenericPairIntString$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[pair],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as GenericPair<int, String>?)!;
    }
  }

  Future<GenericPair<double, bool>> echoGenericPairDoubleBool(
    GenericPair<double, bool> pair,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoGenericPairDoubleBool$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[pair],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as GenericPair<double, bool>?)!;
    }
  }

  Future<GenericContainer<GenericsAllTypes>> echoGenericContainerAllTypes(
    GenericContainer<GenericsAllTypes> container,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoGenericContainerAllTypes$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[container],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as GenericContainer<GenericsAllTypes>?)!;
    }
  }

  Future<GenericPair<GenericsAllTypes, GenericsAllNullableTypes>>
  echoGenericPairClasses(
    GenericPair<GenericsAllTypes, GenericsAllNullableTypes> pair,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoGenericPairClasses$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[pair],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0]
          as GenericPair<GenericsAllTypes, GenericsAllNullableTypes>?)!;
    }
  }

  Future<NestedGeneric<String, int, double>> echoNestedGenericStringIntDouble(
    NestedGeneric<String, int, double> nested,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoNestedGenericStringIntDouble$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[nested],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as NestedGeneric<String, int, double>?)!;
    }
  }

  Future<NestedGeneric<GenericsAllTypes, String, int>>
  echoNestedGenericWithClasses(
    NestedGeneric<GenericsAllTypes, String, int> nested,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoNestedGenericWithClasses$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[nested],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0]
          as NestedGeneric<GenericsAllTypes, String, int>?)!;
    }
  }

  Future<List<GenericContainer<int>>> echoListGenericContainer(
    List<GenericContainer<int>> list,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoListGenericContainer$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[list],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as List<Object?>?)!
          .cast<GenericContainer<int>>();
    }
  }

  Future<List<GenericPair<String, int>>> echoListGenericPair(
    List<GenericPair<String, int>> list,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoListGenericPair$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[list],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as List<Object?>?)!
          .cast<GenericPair<String, int>>();
    }
  }

  Future<Map<String, GenericContainer<int>>> echoMapGenericContainer(
    Map<String, GenericContainer<int>> map,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoMapGenericContainer$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[map],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as Map<Object?, Object?>?)!
          .cast<String, GenericContainer<int>>();
    }
  }

  Future<Map<int, GenericPair<String, double>>> echoMapGenericPair(
    Map<int, GenericPair<String, double>> map,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoMapGenericPair$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[map],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as Map<Object?, Object?>?)!
          .cast<int, GenericPair<String, double>>();
    }
  }

  Future<GenericContainer<int>> echoAsyncGenericInt(
    GenericContainer<int> container,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoAsyncGenericInt$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[container],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as GenericContainer<int>?)!;
    }
  }

  Future<NestedGeneric<String, int, double>> echoAsyncNestedGeneric(
    NestedGeneric<String, int, double> nested,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoAsyncNestedGeneric$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[nested],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as NestedGeneric<String, int, double>?)!;
    }
  }

  Future<Either<GenericContainer<int>, GenericContainer<String>>>
  echoEitherGenericIntOrString(
    Either<GenericContainer<int>, GenericContainer<String>> input,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoEitherGenericIntOrString$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[input],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0]
          as Either<GenericContainer<int>, GenericContainer<String>>?)!;
    }
  }

  Future<Either<GenericPair<String, int>, GenericPair<int, String>>>
  echoEitherGenericPairStringIntOrIntString(
    Either<GenericPair<String, int>, GenericPair<int, String>> input,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoEitherGenericPairStringIntOrIntString$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[input],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0]
          as Either<GenericPair<String, int>, GenericPair<int, String>>?)!;
    }
  }

  Future<
    Either<
      NestedGeneric<String, int, double>,
      NestedGeneric<GenericsAllTypes, String, int>
    >
  >
  echoEitherNestedGenericStringIntDoubleOrClasses(
    Either<
      NestedGeneric<String, int, double>,
      NestedGeneric<GenericsAllTypes, String, int>
    >
    input,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoEitherNestedGenericStringIntDoubleOrClasses$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[input],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0]
          as Either<
            NestedGeneric<String, int, double>,
            NestedGeneric<GenericsAllTypes, String, int>
          >?)!;
    }
  }

  Future<GenericsAllNullableTypesTyped<String, int, double>>
  echoTypedNullableStringIntDouble(
    GenericsAllNullableTypesTyped<String, int, double> typed,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoTypedNullableStringIntDouble$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[typed],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0]
          as GenericsAllNullableTypesTyped<String, int, double>?)!;
    }
  }

  Future<GenericsAllNullableTypesTyped<int, String, bool>>
  echoTypedNullableIntStringBool(
    GenericsAllNullableTypesTyped<int, String, bool> typed,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoTypedNullableIntStringBool$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[typed],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0]
          as GenericsAllNullableTypesTyped<int, String, bool>?)!;
    }
  }

  Future<GenericsAllNullableTypesTyped<GenericsAnEnum, double, String>>
  echoTypedNullableEnumDoubleString(
    GenericsAllNullableTypesTyped<GenericsAnEnum, double, String> typed,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoTypedNullableEnumDoubleString$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[typed],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0]
          as GenericsAllNullableTypesTyped<GenericsAnEnum, double, String>?)!;
    }
  }

  Future<GenericContainer<GenericsAllNullableTypesTyped<String, int, double>>>
  echoGenericContainerTypedNullable(
    GenericContainer<GenericsAllNullableTypesTyped<String, int, double>>
    container,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoGenericContainerTypedNullable$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[container],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0]
          as GenericContainer<
            GenericsAllNullableTypesTyped<String, int, double>
          >?)!;
    }
  }

  Future<
    GenericPair<
      GenericsAllNullableTypesTyped<String, int, double>,
      GenericsAllNullableTypesTyped<int, String, bool>
    >
  >
  echoGenericPairTypedNullable(
    GenericPair<
      GenericsAllNullableTypesTyped<String, int, double>,
      GenericsAllNullableTypesTyped<int, String, bool>
    >
    pair,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoGenericPairTypedNullable$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[pair],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0]
          as GenericPair<
            GenericsAllNullableTypesTyped<String, int, double>,
            GenericsAllNullableTypesTyped<int, String, bool>
          >?)!;
    }
  }

  Future<List<GenericsAllNullableTypesTyped<String, int, double>>>
  echoListTypedNullable(
    List<GenericsAllNullableTypesTyped<String, int, double>> list,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoListTypedNullable$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[list],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as List<Object?>?)!
          .cast<GenericsAllNullableTypesTyped<String, int, double>>();
    }
  }

  Future<Map<String, GenericsAllNullableTypesTyped<int, String, double>>>
  echoMapTypedNullable(
    Map<String, GenericsAllNullableTypesTyped<int, String, double>> map,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoMapTypedNullable$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[map],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as Map<Object?, Object?>?)!
          .cast<String, GenericsAllNullableTypesTyped<int, String, double>>();
    }
  }

  Future<GenericsAllNullableTypesTyped<String, int, double>>
  echoAsyncTypedNullableStringIntDouble(
    GenericsAllNullableTypesTyped<String, int, double> typed,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoAsyncTypedNullableStringIntDouble$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[typed],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0]
          as GenericsAllNullableTypesTyped<String, int, double>?)!;
    }
  }

  Future<GenericContainer<GenericsAllNullableTypesTyped<String, int, double>>>
  echoAsyncGenericContainerTypedNullable(
    GenericContainer<GenericsAllNullableTypesTyped<String, int, double>>
    container,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoAsyncGenericContainerTypedNullable$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[container],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0]
          as GenericContainer<
            GenericsAllNullableTypesTyped<String, int, double>
          >?)!;
    }
  }

  Future<GenericDefaults> echoGenericDefaults(GenericDefaults defaults) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoGenericDefaults$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[defaults],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as GenericDefaults?)!;
    }
  }

  /// Return a GenericDefaults with all default values
  Future<GenericDefaults> returnGenericDefaults() async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.returnGenericDefaults$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      null,
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as GenericDefaults?)!;
    }
  }

  Future<GenericDefaults> echoAsyncGenericDefaults(
    GenericDefaults defaults,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.echoAsyncGenericDefaults$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[defaults],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as GenericDefaults?)!;
    }
  }

  Future<GenericContainer<GenericsAllNullableTypesTyped<String, int, double>>>
  callFlutterEchoGenericContainerTypedNullable(
    GenericContainer<GenericsAllNullableTypesTyped<String, int, double>>
    container,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.callFlutterEchoGenericContainerTypedNullable$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[container],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0]
          as GenericContainer<
            GenericsAllNullableTypesTyped<String, int, double>
          >?)!;
    }
  }

  Future<GenericDefaults> callFlutterEchoGenericDefaults(
    GenericDefaults defaults,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.callFlutterEchoGenericDefaults$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[defaults],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as GenericDefaults?)!;
    }
  }

  Future<GenericContainer<int>> callFlutterEchoGenericDefaultsInt(
    GenericDefaults defaults,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.callFlutterEchoGenericDefaultsInt$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[defaults],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as GenericContainer<int>?)!;
    }
  }

  Future<NestedGeneric<String, int, double>>
  callFlutterEchoGenericDefaultsNested(GenericDefaults defaults) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.callFlutterEchoGenericDefaultsNested$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[defaults],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as NestedGeneric<String, int, double>?)!;
    }
  }

  Future<GenericPair<int, Either<String, int>>>
  callFlutterEchoGenericDefaultsPairEither(GenericDefaults defaults) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.callFlutterEchoGenericDefaultsPairEither$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[defaults],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0]
          as GenericPair<int, Either<String, int>>?)!;
    }
  }

  Future<GenericContainer<int>> callFlutterEchoGenericInt(
    GenericContainer<int> container,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.callFlutterEchoGenericInt$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[container],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as GenericContainer<int>?)!;
    }
  }

  Future<GenericPair<String, int>> callFlutterEchoGenericPairStringInt(
    GenericPair<String, int> pair,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.callFlutterEchoGenericPairStringInt$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[pair],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as GenericPair<String, int>?)!;
    }
  }

  Future<GenericContainer<String>> callFlutterEchoGenericString(
    GenericContainer<String> container,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.callFlutterEchoGenericString$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[container],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as GenericContainer<String>?)!;
    }
  }

  Future<List<GenericContainer<int>>> callFlutterEchoListGenericContainer(
    List<GenericContainer<int>> list,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.callFlutterEchoListGenericContainer$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[list],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as List<Object?>?)!
          .cast<GenericContainer<int>>();
    }
  }

  Future<List<GenericsAllNullableTypesTyped<String, int, double>>>
  callFlutterEchoListTypedNullable(
    List<GenericsAllNullableTypesTyped<String, int, double>> list,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.callFlutterEchoListTypedNullable$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[list],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as List<Object?>?)!
          .cast<GenericsAllNullableTypesTyped<String, int, double>>();
    }
  }

  Future<Map<String, GenericContainer<int>>> callFlutterEchoMapGenericContainer(
    Map<String, GenericContainer<int>> map,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.callFlutterEchoMapGenericContainer$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[map],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as Map<Object?, Object?>?)!
          .cast<String, GenericContainer<int>>();
    }
  }

  Future<Map<String, GenericsAllNullableTypesTyped<int, String, double>>>
  callFlutterEchoMapTypedNullable(
    Map<String, GenericsAllNullableTypesTyped<int, String, double>> map,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.callFlutterEchoMapTypedNullable$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[map],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as Map<Object?, Object?>?)!
          .cast<String, GenericsAllNullableTypesTyped<int, String, double>>();
    }
  }

  Future<NestedGeneric<String, int, double>>
  callFlutterEchoNestedGenericStringIntDouble(
    NestedGeneric<String, int, double> nested,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.callFlutterEchoNestedGenericStringIntDouble$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[nested],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as NestedGeneric<String, int, double>?)!;
    }
  }

  Future<GenericsAllNullableTypesTyped<int, String, bool>>
  callFlutterEchoTypedNullableIntStringBool(
    GenericsAllNullableTypesTyped<int, String, bool> typed,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.callFlutterEchoTypedNullableIntStringBool$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[typed],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0]
          as GenericsAllNullableTypesTyped<int, String, bool>?)!;
    }
  }

  Future<GenericsAllNullableTypesTyped<String, int, double>>
  callFlutterEchoTypedNullableStringIntDouble(
    GenericsAllNullableTypesTyped<String, int, double> typed,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.callFlutterEchoTypedNullableStringIntDouble$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[typed],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0]
          as GenericsAllNullableTypesTyped<String, int, double>?)!;
    }
  }

  Future<GenericContainer<Either<String, int>>>
  callFlutterReturnGenericDefaultsEitherLeft() async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.callFlutterReturnGenericDefaultsEitherLeft$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      null,
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0]
          as GenericContainer<Either<String, int>>?)!;
    }
  }

  Future<GenericContainer<Either<String, int>>>
  callFlutterReturnGenericDefaultsEitherRight() async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.HostGenericApi.callFlutterReturnGenericDefaultsEitherRight$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      null,
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0]
          as GenericContainer<Either<String, int>>?)!;
    }
  }
}

/// Flutter API for testing generic types from Flutter to host.
abstract class FlutterGenericApi {
  static const MessageCodec<Object?> golubetsChannelCodec = _GolubetsCodec();

  GenericContainer<int> echoGenericInt(GenericContainer<int> container);

  GenericContainer<String> echoGenericString(
    GenericContainer<String> container,
  );

  GenericPair<String, int> echoGenericPairStringInt(
    GenericPair<String, int> pair,
  );

  NestedGeneric<String, int, double> echoNestedGenericStringIntDouble(
    NestedGeneric<String, int, double> nested,
  );

  List<GenericContainer<int>> echoListGenericContainer(
    List<GenericContainer<int>> list,
  );

  Map<String, GenericContainer<int>> echoMapGenericContainer(
    Map<String, GenericContainer<int>> map,
  );

  GenericsAllNullableTypesTyped<String, int, double>
  echoTypedNullableStringIntDouble(
    GenericsAllNullableTypesTyped<String, int, double> typed,
  );

  GenericsAllNullableTypesTyped<int, String, bool>
  echoTypedNullableIntStringBool(
    GenericsAllNullableTypesTyped<int, String, bool> typed,
  );

  GenericContainer<GenericsAllNullableTypesTyped<String, int, double>>
  echoGenericContainerTypedNullable(
    GenericContainer<GenericsAllNullableTypesTyped<String, int, double>>
    container,
  );

  List<GenericsAllNullableTypesTyped<String, int, double>>
  echoListTypedNullable(
    List<GenericsAllNullableTypesTyped<String, int, double>> list,
  );

  Map<String, GenericsAllNullableTypesTyped<int, String, double>>
  echoMapTypedNullable(
    Map<String, GenericsAllNullableTypesTyped<int, String, double>> map,
  );

  GenericDefaults echoGenericDefaults(GenericDefaults defaults);

  GenericContainer<int> echoGenericDefaultsInt(GenericDefaults defaults);

  GenericPair<int, Either<String, int>> echoGenericDefaultsPairEither(
    GenericDefaults defaults,
  );

  NestedGeneric<String, int, double> echoGenericDefaultsNested(
    GenericDefaults defaults,
  );

  GenericContainer<Either<String, int>> returnGenericDefaultsEitherLeft();

  GenericContainer<Either<String, int>> returnGenericDefaultsEitherRight();

  static void setUp(
    FlutterGenericApi? api, {
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty
        ? '.$messageChannelSuffix'
        : '';
    {
      final BasicMessageChannel<Object?>
      golubetsVar_channel = BasicMessageChannel<Object?>(
        'dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoGenericInt$messageChannelSuffix',
        golubetsChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        golubetsVar_channel.setMessageHandler(null);
      } else {
        golubetsVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoGenericInt was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final GenericContainer<int>? arg_container =
              (args[0] as GenericContainer<int>?);
          assert(
            arg_container != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoGenericInt was null, expected non-null GenericContainer<int>.',
          );
          try {
            final GenericContainer<int> output = api.echoGenericInt(
              arg_container!,
            );
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      golubetsVar_channel = BasicMessageChannel<Object?>(
        'dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoGenericString$messageChannelSuffix',
        golubetsChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        golubetsVar_channel.setMessageHandler(null);
      } else {
        golubetsVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoGenericString was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final GenericContainer<String>? arg_container =
              (args[0] as GenericContainer<String>?);
          assert(
            arg_container != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoGenericString was null, expected non-null GenericContainer<String>.',
          );
          try {
            final GenericContainer<String> output = api.echoGenericString(
              arg_container!,
            );
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      golubetsVar_channel = BasicMessageChannel<Object?>(
        'dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoGenericPairStringInt$messageChannelSuffix',
        golubetsChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        golubetsVar_channel.setMessageHandler(null);
      } else {
        golubetsVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoGenericPairStringInt was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final GenericPair<String, int>? arg_pair =
              (args[0] as GenericPair<String, int>?);
          assert(
            arg_pair != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoGenericPairStringInt was null, expected non-null GenericPair<String, int>.',
          );
          try {
            final GenericPair<String, int> output = api
                .echoGenericPairStringInt(arg_pair!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      golubetsVar_channel = BasicMessageChannel<Object?>(
        'dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoNestedGenericStringIntDouble$messageChannelSuffix',
        golubetsChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        golubetsVar_channel.setMessageHandler(null);
      } else {
        golubetsVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoNestedGenericStringIntDouble was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final NestedGeneric<String, int, double>? arg_nested =
              (args[0] as NestedGeneric<String, int, double>?);
          assert(
            arg_nested != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoNestedGenericStringIntDouble was null, expected non-null NestedGeneric<String, int, double>.',
          );
          try {
            final NestedGeneric<String, int, double> output = api
                .echoNestedGenericStringIntDouble(arg_nested!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      golubetsVar_channel = BasicMessageChannel<Object?>(
        'dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoListGenericContainer$messageChannelSuffix',
        golubetsChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        golubetsVar_channel.setMessageHandler(null);
      } else {
        golubetsVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoListGenericContainer was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final List<GenericContainer<int>>? arg_list =
              (args[0] as List<Object?>?)?.cast<GenericContainer<int>>();
          assert(
            arg_list != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoListGenericContainer was null, expected non-null List<GenericContainer<int>>.',
          );
          try {
            final List<GenericContainer<int>> output = api
                .echoListGenericContainer(arg_list!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      golubetsVar_channel = BasicMessageChannel<Object?>(
        'dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoMapGenericContainer$messageChannelSuffix',
        golubetsChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        golubetsVar_channel.setMessageHandler(null);
      } else {
        golubetsVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoMapGenericContainer was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final Map<String, GenericContainer<int>>? arg_map =
              (args[0] as Map<Object?, Object?>?)
                  ?.cast<String, GenericContainer<int>>();
          assert(
            arg_map != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoMapGenericContainer was null, expected non-null Map<String, GenericContainer<int>>.',
          );
          try {
            final Map<String, GenericContainer<int>> output = api
                .echoMapGenericContainer(arg_map!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      golubetsVar_channel = BasicMessageChannel<Object?>(
        'dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoTypedNullableStringIntDouble$messageChannelSuffix',
        golubetsChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        golubetsVar_channel.setMessageHandler(null);
      } else {
        golubetsVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoTypedNullableStringIntDouble was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final GenericsAllNullableTypesTyped<String, int, double>? arg_typed =
              (args[0] as GenericsAllNullableTypesTyped<String, int, double>?);
          assert(
            arg_typed != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoTypedNullableStringIntDouble was null, expected non-null GenericsAllNullableTypesTyped<String, int, double>.',
          );
          try {
            final GenericsAllNullableTypesTyped<String, int, double> output =
                api.echoTypedNullableStringIntDouble(arg_typed!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      golubetsVar_channel = BasicMessageChannel<Object?>(
        'dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoTypedNullableIntStringBool$messageChannelSuffix',
        golubetsChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        golubetsVar_channel.setMessageHandler(null);
      } else {
        golubetsVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoTypedNullableIntStringBool was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final GenericsAllNullableTypesTyped<int, String, bool>? arg_typed =
              (args[0] as GenericsAllNullableTypesTyped<int, String, bool>?);
          assert(
            arg_typed != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoTypedNullableIntStringBool was null, expected non-null GenericsAllNullableTypesTyped<int, String, bool>.',
          );
          try {
            final GenericsAllNullableTypesTyped<int, String, bool> output = api
                .echoTypedNullableIntStringBool(arg_typed!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      golubetsVar_channel = BasicMessageChannel<Object?>(
        'dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoGenericContainerTypedNullable$messageChannelSuffix',
        golubetsChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        golubetsVar_channel.setMessageHandler(null);
      } else {
        golubetsVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoGenericContainerTypedNullable was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final GenericContainer<
            GenericsAllNullableTypesTyped<String, int, double>
          >?
          arg_container =
              (args[0]
                  as GenericContainer<
                    GenericsAllNullableTypesTyped<String, int, double>
                  >?);
          assert(
            arg_container != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoGenericContainerTypedNullable was null, expected non-null GenericContainer<GenericsAllNullableTypesTyped<String, int, double>>.',
          );
          try {
            final GenericContainer<
              GenericsAllNullableTypesTyped<String, int, double>
            >
            output = api.echoGenericContainerTypedNullable(arg_container!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      golubetsVar_channel = BasicMessageChannel<Object?>(
        'dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoListTypedNullable$messageChannelSuffix',
        golubetsChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        golubetsVar_channel.setMessageHandler(null);
      } else {
        golubetsVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoListTypedNullable was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final List<GenericsAllNullableTypesTyped<String, int, double>>?
          arg_list = (args[0] as List<Object?>?)
              ?.cast<GenericsAllNullableTypesTyped<String, int, double>>();
          assert(
            arg_list != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoListTypedNullable was null, expected non-null List<GenericsAllNullableTypesTyped<String, int, double>>.',
          );
          try {
            final List<GenericsAllNullableTypesTyped<String, int, double>>
            output = api.echoListTypedNullable(arg_list!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      golubetsVar_channel = BasicMessageChannel<Object?>(
        'dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoMapTypedNullable$messageChannelSuffix',
        golubetsChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        golubetsVar_channel.setMessageHandler(null);
      } else {
        golubetsVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoMapTypedNullable was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final Map<String, GenericsAllNullableTypesTyped<int, String, double>>?
          arg_map = (args[0] as Map<Object?, Object?>?)
              ?.cast<
                String,
                GenericsAllNullableTypesTyped<int, String, double>
              >();
          assert(
            arg_map != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoMapTypedNullable was null, expected non-null Map<String, GenericsAllNullableTypesTyped<int, String, double>>.',
          );
          try {
            final Map<
              String,
              GenericsAllNullableTypesTyped<int, String, double>
            >
            output = api.echoMapTypedNullable(arg_map!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      golubetsVar_channel = BasicMessageChannel<Object?>(
        'dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoGenericDefaults$messageChannelSuffix',
        golubetsChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        golubetsVar_channel.setMessageHandler(null);
      } else {
        golubetsVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoGenericDefaults was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final GenericDefaults? arg_defaults = (args[0] as GenericDefaults?);
          assert(
            arg_defaults != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoGenericDefaults was null, expected non-null GenericDefaults.',
          );
          try {
            final GenericDefaults output = api.echoGenericDefaults(
              arg_defaults!,
            );
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      golubetsVar_channel = BasicMessageChannel<Object?>(
        'dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoGenericDefaultsInt$messageChannelSuffix',
        golubetsChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        golubetsVar_channel.setMessageHandler(null);
      } else {
        golubetsVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoGenericDefaultsInt was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final GenericDefaults? arg_defaults = (args[0] as GenericDefaults?);
          assert(
            arg_defaults != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoGenericDefaultsInt was null, expected non-null GenericDefaults.',
          );
          try {
            final GenericContainer<int> output = api.echoGenericDefaultsInt(
              arg_defaults!,
            );
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      golubetsVar_channel = BasicMessageChannel<Object?>(
        'dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoGenericDefaultsPairEither$messageChannelSuffix',
        golubetsChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        golubetsVar_channel.setMessageHandler(null);
      } else {
        golubetsVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoGenericDefaultsPairEither was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final GenericDefaults? arg_defaults = (args[0] as GenericDefaults?);
          assert(
            arg_defaults != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoGenericDefaultsPairEither was null, expected non-null GenericDefaults.',
          );
          try {
            final GenericPair<int, Either<String, int>> output = api
                .echoGenericDefaultsPairEither(arg_defaults!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      golubetsVar_channel = BasicMessageChannel<Object?>(
        'dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoGenericDefaultsNested$messageChannelSuffix',
        golubetsChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        golubetsVar_channel.setMessageHandler(null);
      } else {
        golubetsVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoGenericDefaultsNested was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final GenericDefaults? arg_defaults = (args[0] as GenericDefaults?);
          assert(
            arg_defaults != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.echoGenericDefaultsNested was null, expected non-null GenericDefaults.',
          );
          try {
            final NestedGeneric<String, int, double> output = api
                .echoGenericDefaultsNested(arg_defaults!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      golubetsVar_channel = BasicMessageChannel<Object?>(
        'dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.returnGenericDefaultsEitherLeft$messageChannelSuffix',
        golubetsChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        golubetsVar_channel.setMessageHandler(null);
      } else {
        golubetsVar_channel.setMessageHandler((Object? message) async {
          try {
            final GenericContainer<Either<String, int>> output = api
                .returnGenericDefaultsEitherLeft();
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      golubetsVar_channel = BasicMessageChannel<Object?>(
        'dev.bayori.golubets.golubets_integration_tests.FlutterGenericApi.returnGenericDefaultsEitherRight$messageChannelSuffix',
        golubetsChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        golubetsVar_channel.setMessageHandler(null);
      } else {
        golubetsVar_channel.setMessageHandler((Object? message) async {
          try {
            final GenericContainer<Either<String, int>> output = api
                .returnGenericDefaultsEitherRight();
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
  }
}
