// Copyright 2013 The Flutter Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Golubets, do not edit directly.
// See also: https://pub.dev/packages/golubets
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({
  Object? result,
  PlatformException? error,
  bool empty = false,
}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed.every(
          ((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]),
        );
  }
  if (a is Map && b is Map) {
    return a.length == b.length &&
        a.entries.every(
          (MapEntry<Object?, Object?> entry) =>
              (b as Map<Object?, Object?>).containsKey(entry.key) &&
              _deepEquals(entry.value, b[entry.key]),
        );
  }
  return a == b;
}

enum ReplyType {
  success,
  error,
}

class NonNullFieldSearchRequest {
  NonNullFieldSearchRequest({
    required this.query,
  });

  String query;

  List<Object?> _toList() {
    return <Object?>[
      query,
    ];
  }

  Object encode() {
    return _toList();
  }

  static NonNullFieldSearchRequest decode(Object result) {
    result as List<Object?>;
    return NonNullFieldSearchRequest(
      query: result[0]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NonNullFieldSearchRequest ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class ExtraData {
  ExtraData({
    required this.detailA,
    required this.detailB,
  });

  String detailA;

  String detailB;

  List<Object?> _toList() {
    return <Object?>[
      detailA,
      detailB,
    ];
  }

  Object encode() {
    return _toList();
  }

  static ExtraData decode(Object result) {
    result as List<Object?>;
    return ExtraData(
      detailA: result[0]! as String,
      detailB: result[1]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! ExtraData || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class NonNullFieldSearchReply {
  NonNullFieldSearchReply({
    required this.result,
    required this.error,
    required this.indices,
    required this.extraData,
    required this.type,
  });

  String result;

  String error;

  List<int?> indices;

  ExtraData extraData;

  ReplyType type;

  List<Object?> _toList() {
    return <Object?>[
      result,
      error,
      indices,
      extraData,
      type,
    ];
  }

  Object encode() {
    return _toList();
  }

  static NonNullFieldSearchReply decode(Object result) {
    result as List<Object?>;
    return NonNullFieldSearchReply(
      result: result[0]! as String,
      error: result[1]! as String,
      indices: (result[2] as List<Object?>?)!.cast<int?>(),
      extraData: result[3]! as ExtraData,
      type: result[4]! as ReplyType,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NonNullFieldSearchReply || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class _GolubetsCodec extends StandardMessageCodec {
  const _GolubetsCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    } else if (value is ReplyType) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    } else if (value is NonNullFieldSearchRequest) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is ExtraData) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is NonNullFieldSearchReply) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ReplyType.values[value];
      case 130:
        return NonNullFieldSearchRequest.decode(readValue(buffer)!);
      case 131:
        return ExtraData.decode(readValue(buffer)!);
      case 132:
        return NonNullFieldSearchReply.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class NonNullFieldHostApi {
  /// Constructor for [NonNullFieldHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  NonNullFieldHostApi({
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) : golubetsVar_binaryMessenger = binaryMessenger,
       golubetsVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty
           ? '.$messageChannelSuffix'
           : '';
  final BinaryMessenger? golubetsVar_binaryMessenger;

  static const MessageCodec<Object?> golubetsChannelCodec = _GolubetsCodec();

  final String golubetsVar_messageChannelSuffix;

  Future<NonNullFieldSearchReply> search(
    NonNullFieldSearchRequest nested,
  ) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.NonNullFieldHostApi.search$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[nested],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as NonNullFieldSearchReply?)!;
    }
  }
}

abstract class NonNullFieldFlutterApi {
  static const MessageCodec<Object?> golubetsChannelCodec = _GolubetsCodec();

  NonNullFieldSearchReply search(NonNullFieldSearchRequest request);

  static void setUp(
    NonNullFieldFlutterApi? api, {
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty
        ? '.$messageChannelSuffix'
        : '';
    {
      final BasicMessageChannel<Object?>
      golubetsVar_channel = BasicMessageChannel<Object?>(
        'dev.bayori.golubets.golubets_integration_tests.NonNullFieldFlutterApi.search$messageChannelSuffix',
        golubetsChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        golubetsVar_channel.setMessageHandler(null);
      } else {
        golubetsVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.NonNullFieldFlutterApi.search was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final NonNullFieldSearchRequest? arg_request =
              (args[0] as NonNullFieldSearchRequest?);
          assert(
            arg_request != null,
            'Argument for dev.bayori.golubets.golubets_integration_tests.NonNullFieldFlutterApi.search was null, expected non-null NonNullFieldSearchRequest.',
          );
          try {
            final NonNullFieldSearchReply output = api.search(arg_request!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
  }
}
