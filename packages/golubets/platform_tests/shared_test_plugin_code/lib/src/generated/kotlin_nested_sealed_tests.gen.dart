// Copyright 2013 The Flutter Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Golubets, do not edit directly.
// See also: https://pub.dev/packages/golubets
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed.every(
          ((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]),
        );
  }
  if (a is Map && b is Map) {
    return a.length == b.length &&
        a.entries.every(
          (MapEntry<Object?, Object?> entry) =>
              (b as Map<Object?, Object?>).containsKey(entry.key) &&
              _deepEquals(entry.value, b[entry.key]),
        );
  }
  return a == b;
}

sealed class SomeState {}

class Loading extends SomeState {
  Loading({
    required this.progress,
  });

  double progress;

  List<Object?> _toList() {
    return <Object?>[
      progress,
    ];
  }

  Object encode() {
    return _toList();
  }

  static Loading decode(Object result) {
    result as List<Object?>;
    return Loading(
      progress: result[0]! as double,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! Loading || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class Success extends SomeState {
  Success({
    required this.data,
  });

  String data;

  List<Object?> _toList() {
    return <Object?>[
      data,
    ];
  }

  Object encode() {
    return _toList();
  }

  static Success decode(Object result) {
    result as List<Object?>;
    return Success(
      data: result[0]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! Success || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class Error extends SomeState {
  Error({
    required this.code,
  });

  int code;

  List<Object?> _toList() {
    return <Object?>[
      code,
    ];
  }

  Object encode() {
    return _toList();
  }

  static Error decode(Object result) {
    result as List<Object?>;
    return Error(
      code: result[0]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! Error || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class _GolubetsCodec extends StandardMessageCodec {
  const _GolubetsCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    } else if (value is Loading) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is Success) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is Error) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129:
        return Loading.decode(readValue(buffer)!);
      case 130:
        return Success.decode(readValue(buffer)!);
      case 131:
        return Error.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class KotlinNestedSealedApi {
  /// Constructor for [KotlinNestedSealedApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  KotlinNestedSealedApi({
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) : golubetsVar_binaryMessenger = binaryMessenger,
       golubetsVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty
           ? '.$messageChannelSuffix'
           : '';
  final BinaryMessenger? golubetsVar_binaryMessenger;

  static const MessageCodec<Object?> golubetsChannelCodec = _GolubetsCodec();

  final String golubetsVar_messageChannelSuffix;

  Future<SomeState> echo(SomeState state) async {
    final String golubetsVar_channelName =
        'dev.bayori.golubets.golubets_integration_tests.KotlinNestedSealedApi.echo$golubetsVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubetsVar_channel =
        BasicMessageChannel<Object?>(
          golubetsVar_channelName,
          golubetsChannelCodec,
          binaryMessenger: golubetsVar_binaryMessenger,
        );
    final Future<Object?> golubetsVar_sendFuture = golubetsVar_channel.send(
      <Object?>[state],
    );
    final List<Object?>? golubetsVar_replyList =
        await golubetsVar_sendFuture as List<Object?>?;
    if (golubetsVar_replyList == null) {
      throw _createConnectionError(golubetsVar_channelName);
    } else if (golubetsVar_replyList.length > 1) {
      throw PlatformException(
        code: golubetsVar_replyList[0]! as String,
        message: golubetsVar_replyList[1] as String?,
        details: golubetsVar_replyList[2],
      );
    } else if (golubetsVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubetsVar_replyList[0] as SomeState?)!;
    }
  }
}
