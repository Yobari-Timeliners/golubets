// Copyright 2013 The Flutter Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file specifically tests the test GolubetsInstanceManager generated by core_tests.

import 'package:flutter_test/flutter_test.dart';
import 'package:leak_tracker/leak_tracker.dart';
import 'package:shared_test_plugin_code/src/generated/proxy_api_tests.gen.dart';

void main() {
  group('InstanceManager', () {
    test('addHostCreatedInstance', () {
      final GolubetsInstanceManager instanceManager = GolubetsInstanceManager(
        onWeakReferenceRemoved: (_) {},
      );

      final CopyableObject object = CopyableObject(
        golubets_instanceManager: instanceManager,
      );

      instanceManager.addHostCreatedInstance(object, 0);

      expect(instanceManager.getIdentifier(object), 0);
      expect(
        instanceManager.getInstanceWithWeakReference(0),
        isA<CopyableObject>(),
      );
    });

    test('addHostCreatedInstance prevents already used objects and ids', () {
      final GolubetsInstanceManager instanceManager = GolubetsInstanceManager(
        onWeakReferenceRemoved: (_) {},
      );

      final CopyableObject object = CopyableObject(
        golubets_instanceManager: instanceManager,
      );

      instanceManager.addHostCreatedInstance(object, 0);

      expect(
        () => instanceManager.addHostCreatedInstance(object, 0),
        throwsAssertionError,
      );

      expect(
        () => instanceManager.addHostCreatedInstance(
          CopyableObject(golubets_instanceManager: instanceManager),
          0,
        ),
        throwsAssertionError,
      );
    });

    test('addFlutterCreatedInstance', () {
      final GolubetsInstanceManager instanceManager = GolubetsInstanceManager(
        onWeakReferenceRemoved: (_) {},
      );

      final CopyableObject object = CopyableObject(
        golubets_instanceManager: instanceManager,
      );

      instanceManager.addDartCreatedInstance(object);

      final int? instanceId = instanceManager.getIdentifier(object);
      expect(instanceId, isNotNull);
      expect(instanceManager.getInstanceWithWeakReference(instanceId!), object);
    });

    test('removeWeakReference', () {
      int? weakInstanceId;
      final GolubetsInstanceManager instanceManager = GolubetsInstanceManager(
        onWeakReferenceRemoved: (int instanceId) {
          weakInstanceId = instanceId;
        },
      );

      final CopyableObject object = CopyableObject(
        golubets_instanceManager: instanceManager,
      );

      instanceManager.addHostCreatedInstance(object, 0);

      expect(instanceManager.removeWeakReference(object), 0);
      expect(
        instanceManager.getInstanceWithWeakReference(0),
        isA<CopyableObject>(),
      );
      expect(weakInstanceId, 0);
    });

    test('removeWeakReference removes only weak reference', () {
      final GolubetsInstanceManager instanceManager = GolubetsInstanceManager(
        onWeakReferenceRemoved: (_) {},
      );

      final CopyableObject object = CopyableObject(
        golubets_instanceManager: instanceManager,
      );

      instanceManager.addHostCreatedInstance(object, 0);

      expect(instanceManager.removeWeakReference(object), 0);
      final CopyableObject copy = instanceManager.getInstanceWithWeakReference(
        0,
      )!;
      expect(identical(object, copy), isFalse);
    });

    test('remove', () {
      final GolubetsInstanceManager instanceManager = GolubetsInstanceManager(
        onWeakReferenceRemoved: (_) {},
      );

      final CopyableObject object = CopyableObject(
        golubets_instanceManager: instanceManager,
      );

      instanceManager.addHostCreatedInstance(object, 0);
      instanceManager.removeWeakReference(object);
      expect(instanceManager.remove(0), isA<CopyableObject>());
      expect(instanceManager.containsIdentifier(0), isFalse);
    });

    test('remove throws AssertionError if weak reference still exists', () {
      final GolubetsInstanceManager instanceManager = GolubetsInstanceManager(
        onWeakReferenceRemoved: (_) {},
      );

      final CopyableObject object = CopyableObject(
        golubets_instanceManager: instanceManager,
      );

      instanceManager.addDartCreatedInstance(object);
      expect(() => instanceManager.remove(0), throwsAssertionError);
    });

    test('getInstance can add a new weak reference', () {
      final GolubetsInstanceManager instanceManager = GolubetsInstanceManager(
        onWeakReferenceRemoved: (_) {},
      );

      final CopyableObject object = CopyableObject(
        golubets_instanceManager: instanceManager,
      );

      instanceManager.addHostCreatedInstance(object, 0);
      instanceManager.removeWeakReference(object);

      final CopyableObject newWeakCopy = instanceManager
          .getInstanceWithWeakReference(0)!;
      expect(identical(object, newWeakCopy), isFalse);
    });

    test(
      'addDartCreatedInstance should add finalizer to original object',
      () async {
        bool weakReferencedRemovedCalled = false;
        final GolubetsInstanceManager instanceManager = GolubetsInstanceManager(
          onWeakReferenceRemoved: (_) {
            weakReferencedRemovedCalled = true;
          },
        );

        CopyableObject? object = CopyableObject(
          golubets_instanceManager: instanceManager,
        );

        instanceManager.addDartCreatedInstance(object);

        object = null;
        await forceGC(fullGcCycles: 2);

        expect(weakReferencedRemovedCalled, isTrue);
      },
    );

    test(
      'addHostCreatedInstance should not add finalizer to original object',
      () async {
        bool weakReferencedRemovedCalled = false;
        final GolubetsInstanceManager instanceManager = GolubetsInstanceManager(
          onWeakReferenceRemoved: (_) {
            weakReferencedRemovedCalled = true;
          },
        );

        CopyableObject? object = CopyableObject(
          golubets_instanceManager: instanceManager,
        );

        instanceManager.addHostCreatedInstance(object, 0);

        object = null;
        await forceGC(fullGcCycles: 2);

        expect(weakReferencedRemovedCalled, isFalse);
      },
    );

    testWidgets(
      'instantiating default InstanceManager does not make a message call',
      (WidgetTester tester) async {
        bool messageCallMade = false;
        TestDefaultBinaryMessengerBinding
            .instance
            .defaultBinaryMessenger
            .allMessagesHandler = (_, __, ___) {
          messageCallMade = true;
          return null;
        };

        // Initialize default InstanceManager
        // ignore: unnecessary_statements
        GolubetsInstanceManager.instance;

        expect(messageCallMade, isFalse);
      },
    );

    testWidgets(
      'default InstanceManager does not make message call when weak reference is removed',
      (WidgetTester tester) async {
        bool messageCallMade = false;
        TestDefaultBinaryMessengerBinding
            .instance
            .defaultBinaryMessenger
            .allMessagesHandler = (_, __, ___) {
          messageCallMade = true;
          return null;
        };

        final GolubetsInstanceManager instanceManager =
            GolubetsInstanceManager.instance;

        final int identifier = instanceManager.addDartCreatedInstance(
          CopyableObject(),
        );
        instanceManager.onWeakReferenceRemoved(identifier);

        expect(messageCallMade, isFalse);
      },
    );
  });
}

class CopyableObject extends GolubetsInternalProxyApiBaseClass {
  // ignore: non_constant_identifier_names
  CopyableObject({super.golubets_instanceManager});

  @override
  // ignore: non_constant_identifier_names
  CopyableObject golubets_copy() {
    return CopyableObject(golubets_instanceManager: golubets_instanceManager);
  }
}
